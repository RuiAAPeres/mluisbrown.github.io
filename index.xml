<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Michael Brown</title>
    <link>http://michael-brown.net/</link>
    <description>Recent content on Michael Brown</description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>Copyright Â© 2016</copyright>
    <lastBuildDate>Tue, 08 Mar 2016 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://michael-brown.net/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Using stride to convert C-style for loops to Swift 2.2</title>
      <link>http://michael-brown.net/2016/using-stride-to-convert-c-style-for-loops-to-swift-2.2/</link>
      <pubDate>Tue, 08 Mar 2016 00:00:00 +0000</pubDate>
      
      <guid>http://michael-brown.net/2016/using-stride-to-convert-c-style-for-loops-to-swift-2.2/</guid>
      <description>&lt;p&gt;With the release of Swift 2.2 in Xcode 7.3 C-style for loops have become &lt;a href=&#34;https://github.com/apple/swift-evolution/blob/master/proposals/0007-remove-c-style-for-loops.md&#34;&gt;deprecated&lt;/a&gt;. The default Xcode fix-it for converting them uses a Range:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let count = 5
for var index = 0; index &amp;lt; count; index++ {
    doSomething(index)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;is converted do:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let count = 5
for index in 0 ..&amp;lt; count {
    doSomething(index)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For the vast majority of C-style for loops this will work perfectly well. But there are cases where using a Range not only won&amp;rsquo;t work as expected but will actually crash!&lt;/p&gt;

&lt;p&gt;Consider the case where &lt;code&gt;count&lt;/code&gt; in the above example is -1 (we&amp;rsquo;ll get to why you might do that in a second). The C style loop would finish immediately as &lt;code&gt;index&lt;/code&gt; is already greater than &lt;code&gt;count&lt;/code&gt; on entry. However, the conversion using a Range would crash with:  &lt;code&gt;fatal error: Can&#39;t form Range with end &amp;lt; start&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;So, why on earth might you want have a loop range with an end less than the start? In my app &lt;a href=&#34;http://memories.land&#34;&gt;Memories&lt;/a&gt; (code available on &lt;a href=&#34;https://github.com/mluisbrown/Memories&#34;&gt;GitHub&lt;/a&gt;) I have a View Controller which is an image viewer where you can swipe left and right to navigate a set of images. In order to save memory, I only want to have the current visible image and the ones immediately to the left and to the right of it loaded in memory. As the user swipes through the images, all other images are purged from memory.&lt;/p&gt;

&lt;p&gt;To purge all the images to the left of the visible image I had a loop that looked like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let page = visiblePage
let firstPage = page - 1
let lastPage = page + 1

// Purge anything before the first page
for var index = 0; index &amp;lt; firstPage; ++index {
    purgePage(index)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If the currently visible image is the first one (&lt;code&gt;page == 0&lt;/code&gt;), then &lt;code&gt;firstPage&lt;/code&gt; will be -1. In the Range version of the loop:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;for index in 0 ..&amp;lt; firstPage {
    purgePage(index)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;we end up with a Range where the end is less than the start. Boom. Ok, this only happens in the edge case where we are on the first page (and the last page, in a similar case where the start is greater than the end). We could wrap the loop in an &lt;code&gt;if&lt;/code&gt; that only executes the loop when &lt;code&gt;page &amp;gt; 0&lt;/code&gt;. But I really hate writing special logic for edge cases if I can possibly avoid it. It&amp;rsquo;s so much cleaner if your logic handles edge cases by default. So what&amp;rsquo;s the solution? The Swift &lt;a href=&#34;http://swiftdoc.org/v2.1/protocol/Strideable&#34;&gt;&lt;code&gt;Strideable&lt;/code&gt;&lt;/a&gt; Protocol, particularly the &lt;a href=&#34;http://swiftdoc.org/v2.1/protocol/Strideable/#func--stride-to_by_&#34;&gt;&lt;code&gt;stride(to:by:)&lt;/code&gt;&lt;/a&gt; method. As the docs state:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Return the sequence of values (self, self + stride, self + stride + stride, &amp;hellip; last) where last is the last value in the progression that is less than end.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So, for example: &lt;code&gt;0.stride(to: 5, by: 1)&lt;/code&gt; returns the sequence (0, 1, 2, 3, 4). Importantly, it doesn&amp;rsquo;t matter if the the value passed in the &lt;code&gt;to:&lt;/code&gt; parameter is less than the &lt;code&gt;self&lt;/code&gt; (the start value) so, for example: &lt;code&gt;0.stride(to: -1, by: 1)&lt;/code&gt; returns an empty sequence. So now we can just replace the Range with the sequence returned from &lt;code&gt;stride(to:by:)&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;for index in 0.stride(to: firstPage, by: 1) {
    purgePage(index)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;the loop to purge the pages &lt;em&gt;after&lt;/em&gt; the current one is similar, using a reverse sequence (&lt;code&gt;pages&lt;/code&gt; here is the array of pages):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;for index in pages.indices.last?.stride(to: lastPage, by: -1) {
    purgePage(index)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now that&amp;rsquo;s a lot nicer. No special logic for edge cases!&lt;/p&gt;

&lt;p&gt;We can still improve on this though and make these loops more &amp;lsquo;functional&amp;rsquo; and perhaps more idiomatic Swift using &lt;a href=&#34;http://swiftdoc.org/v2.1/protocol/SequenceType/#func-foreach_&#34;&gt;&lt;code&gt;forEach(_:)&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;0.stride(to: firstPage, by: 1).forEach(purgePage)
pages.indices.last?.stride(to: lastPage, by: -1).forEach(purgePage)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now that&amp;rsquo;s looking really elegant. I&amp;rsquo;m tempted to use &lt;code&gt;stride(to:by:).forEach(_:)&lt;/code&gt; to replace all my C style for loops in Swift.  There is a caveat though: you cannot break out of or continue a &lt;code&gt;forEach&lt;/code&gt; iteration with &lt;code&gt;break&lt;/code&gt; or &lt;code&gt;continue&lt;/code&gt;. For those cases just use a &lt;code&gt;stride(to:by:)&lt;/code&gt; sequence with &lt;code&gt;for index in&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Thanks to &lt;a href=&#34;https://twitter.com/NSRenato&#34;&gt;@NSRenato&lt;/a&gt; for the tip on using &lt;code&gt;stride&lt;/code&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Apple vs the FBI</title>
      <link>http://michael-brown.net/2016/apple-vs-the-fbi/</link>
      <pubDate>Tue, 01 Mar 2016 00:00:00 +0000</pubDate>
      
      <guid>http://michael-brown.net/2016/apple-vs-the-fbi/</guid>
      <description>&lt;p&gt;The details of this case have been broken down and explained extremely well by &lt;a href=&#34;https://stratechery.com/2016/apple-the-fbi-and-security/&#34;&gt;Ben Thompson&lt;/a&gt;. The more technical details have also been very thoroughly covered by &lt;a href=&#34;http://www.zdziarski.com/blog/&#34;&gt;Jonathan Zdziarski&lt;/a&gt; on his blog.&lt;/p&gt;

&lt;p&gt;I am clearly on Apple&amp;rsquo;s side in this battle, and very much hope that they don&amp;rsquo;t lose. However, it&amp;rsquo;s worth pointing out that if they were to lose, that is, if they were compelled to provide a mechanism to facilitate brute force pass code cracking it wouldn&amp;rsquo;t be a total disaster. All anyone would need to do to keep their iPhone secure would be use a longer numeric passcode or, even better, an alpha numeric passcode. A 10 digit passcode would take several years to brute force, rather than several hours for a 6 digit one. A 10 character alpha numeric passcode would take thousands of years to crack.&lt;/p&gt;

&lt;p&gt;So, any clued up user (criminal or otherwise) who wants to keep their iPhone secure against GovtOS just needs to use a longer passcode to make it impossible to crack in a useful time period. With Touch ID, the inconvenience of a long passcode is hugely reduced, so I would strongly recommend it.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>About me</title>
      <link>http://michael-brown.net/about/</link>
      <pubDate>Thu, 25 Feb 2016 00:00:00 +0000</pubDate>
      
      <guid>http://michael-brown.net/about/</guid>
      <description>&lt;p&gt;My name is Michael Brown. I&amp;rsquo;m a software developer living in Lisbon, Portugal. I write &lt;a href=&#34;http://michael-brown.net/apps&#34;&gt;apps&lt;/a&gt; for iOS.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Starting Over</title>
      <link>http://michael-brown.net/2016/starting-over/</link>
      <pubDate>Thu, 25 Feb 2016 00:00:00 +0000</pubDate>
      
      <guid>http://michael-brown.net/2016/starting-over/</guid>
      <description>&lt;p&gt;My old tumblr blog was a mess. I was doing a very bad impression of being an Apple blogger, interspersed with the odd post about iOS development. The posts were too long and too infrequent. It was actually starting to be an embarrassment.&lt;/p&gt;

&lt;p&gt;So I killed it. All the old posts are gone.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m starting over, with a new blog using the &lt;a href=&#34;http://gohugo.io/&#34;&gt;Hugo&lt;/a&gt; static blogging engine and hosting everything on &lt;a href=&#34;https://pages.github.com/&#34;&gt;GitHub Pages&lt;/a&gt;. The source for the blog can be found at &lt;a href=&#34;https://github.com/mluisbrown/michael-brown.net-hugo&#34;&gt;here&lt;/a&gt; on GitHub.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m setting myself a target of at least one post per week, even if it&amp;rsquo;s only a one-liner with a link. Here we go!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>iOS Apps</title>
      <link>http://michael-brown.net/apps/</link>
      <pubDate>Thu, 25 Feb 2016 00:00:00 +0000</pubDate>
      
      <guid>http://michael-brown.net/apps/</guid>
      <description>&lt;p&gt;iOS Apps Iâve developed available in the App Store:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://memories.land/&#34;&gt;Memories - Photos taken On This Day&lt;/a&gt;
&lt;a href=&#34;http://memories.land/&#34;&gt;&lt;img src=&#34;http://michael-brown.net/images/appicons/memories.png&#34; alt=&#34;Memories Icon&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://thendo.it/&#34;&gt;ThenDo - Easy, Beautiful Lists&lt;/a&gt;
&lt;a href=&#34;http://thendo.it/&#34;&gt;&lt;img src=&#34;http://michael-brown.net/images/appicons/thendo.png&#34; alt=&#34;ThenDo Icon&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://interest.io/&#34;&gt;Interest : Loan Calculator&lt;/a&gt;
&lt;a href=&#34;http://interest.io/&#34;&gt;&lt;img src=&#34;http://michael-brown.net/images/appicons/interest.png&#34; alt=&#34;Interest Icon&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://itunes.apple.com/pt/app/farmacias-de-servico/id389764591?mt=8&amp;amp;amp;at=11l8Da&amp;amp;amp;ct=blog&#34;&gt;FarmÃ¡cias de ServiÃ§o&lt;/a&gt;
&lt;a href=&#34;https://itunes.apple.com/pt/app/farmacias-de-servico/id389764591?mt=8&amp;amp;amp;at=11l8Da&amp;amp;amp;ct=blog&#34;&gt;&lt;img src=&#34;http://michael-brown.net/images/appicons/farmacias.png&#34; alt=&#34;FarmÃ¡cias Icon&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For questions or support about these apps you can e-mail me at this domain.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>